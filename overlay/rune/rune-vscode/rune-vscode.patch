diff --git a/editors/code/src/main.ts b/editors/code/src/main.ts
index 14799e40..26a903d3 100644
--- a/editors/code/src/main.ts
+++ b/editors/code/src/main.ts
@@ -5,32 +5,25 @@
 
 import * as vscode from 'vscode';
 import * as lc from 'vscode-languageclient/node';
-import * as path from 'path';
-import { promises as fs, PathLike } from 'fs';
-import * as os from 'os';
-import { log, isValidExecutable, assert, pathExists } from './util'
-import { fetchRelease, download } from './net';
-import { PersistentState } from './persistent_state';
+import { log } from './util'
 import { load } from './settings';
-export async function activate(context: vscode.ExtensionContext) {
+export async function activate() {
     log.info('activating rune language server...');
-    await tryActivate(context).catch(err => {
+    await tryActivate().catch(err => {
         void vscode.window.showErrorMessage(`Cannot activate rune-languageserver: ${err.message}`);
         throw err;
     });
 }
 
-async function tryActivate(context: vscode.ExtensionContext) {
+async function tryActivate() {
     let platform = detectPlatform();
 
     if (!platform) {
         return;
     }
 
-    const state = new PersistentState(context.globalState);
-
     let settings = load("rune");
-    let command = settings.binaryPath || await findCommand(context, state, platform);
+    let command = settings.binaryPath || "@lsPath@";
 
     if (!command) {
         log.error('could not find rune language server!');
@@ -70,34 +63,6 @@ async function tryActivate(context: vscode.ExtensionContext) {
     client.start();
 }
 
-/**
- * Find the path to the command to execute.
- */
-async function findCommand(
-    context: vscode.ExtensionContext,
-    state: PersistentState,
-    platform: Platform,
-): Promise<PathLike | undefined> {
-    const exe = `rune-languageserver${platform.ext}`;
-
-    if (!!process.env.RUNE_BUILD_FOLDER) {
-        let envPath = path.join(process.env.RUNE_BUILD_FOLDER, exe);
-
-        if (await pathExists(envPath)) {
-            log.debug(`Using language server from RUNE_BUILD_FOLDER: ${envPath}`);
-            return envPath;
-        }
-    }
-
-    let cargoPath = path.join(os.homedir(), '.cargo', 'bin', exe);
-
-    if (await pathExists(cargoPath)) {
-        log.debug(`Using language server from cargo home: ${cargoPath}`);
-        return cargoPath;
-    }
-
-    return await bootstrapServer(context, state, platform);
-}
 
 /**
  * Information on the current platform.
@@ -145,94 +110,4 @@ function detectPlatform(): Platform | undefined {
 
             return undefined;
     }
-}
-
-/** Bootstrap a language server. */
-async function bootstrapServer(
-    context: vscode.ExtensionContext,
-    state: PersistentState,
-    platform: Platform,
-): Promise<string> {
-    const path = await getServer(context, state, platform);
-
-    if (!path) {
-        throw new Error("Rune Language Server is not available.");
-    }
-
-    log.info("Using server binary at", path);
-
-    if (!isValidExecutable(path)) {
-        throw new Error(`Failed to execute: ${path} --version`);
-    }
-
-    return path;
-}
-
-/** Note: cache time of 2 hours to check for a new release */
-const CACHE_TIME = 3600 * 2;
-
-/** Download a language server from GitHub from the "latest" tag. */
-async function getServer(
-    context: vscode.ExtensionContext,
-    state: PersistentState,
-    platform: Platform,
-): Promise<string | undefined> {
-    const bin = `rune-languageserver-${platform.name}${platform.ext}`;
-    const dest = path.join(context.globalStoragePath, bin);
-
-    const destExists = await pathExists(dest);
-
-    let now = (new Date()).getTime() / 1000;
-    let lastCheck = state.lastCheck;
-
-    let timedOut = !lastCheck || (now - lastCheck) > CACHE_TIME;
-    log.debug("Check cache timeout", { now, lastCheck, timedOut, timeout: CACHE_TIME });
-
-    if (destExists && !timedOut) {
-        // Only check for updates once every two hours.
-        return dest;
-    }
-
-    await state.updateLastCheck(now);
-    const release = await fetchRelease("nightly");
-
-    const artifact = release.assets.find(artifact => artifact.name === `rune-languageserver-${platform.name}.gz`);
-    assert(!!artifact, `Bad release: ${JSON.stringify(release)}`);
-
-    if (destExists && state.releaseId == artifact.id) {
-        return dest;
-    }
-
-    const userResponse = await vscode.window.showInformationMessage(
-        `A new version of the Rune Language Server is available (asset id: ${artifact.id}).`,
-        "Download now"
-    );
-
-    if (userResponse !== "Download now") {
-        return dest;
-    }
-
-    await fs.unlink(dest).catch(err => {
-        if (err.code !== "ENOENT") {
-            throw err;
-        }
-    });
-
-    let globalStorageExists = await pathExists(context.globalStoragePath);
-
-    if (!globalStorageExists) {
-        log.debug(`Creating global storage: ${context.globalStoragePath}`);
-        await fs.mkdir(context.globalStoragePath);
-    }
-
-    await download({
-        url: artifact.browser_download_url,
-        dest,
-        progressTitle: "Downloading Rune Language Server",
-        gunzip: true,
-        mode: 0o755
-    });
-
-    await state.updateReleaseId(release.id);
-    return dest;
-}
+}
\ No newline at end of file
